package Projekt_Euler

import (
	"fmt"
	"slices"
)

//Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
// 1,2,3,5,8,13,21,34,55,89
// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.

func ExampleFibonacci() {
	x := Fibonacci(20)
	y := Fibonacci(4000000)
	z := Fibonacci(35)

	fmt.Println(EvenSum(x))
	fmt.Println(EvenSum(y))
	fmt.Println(EvenSum(z))

	// Output:
	// 10
	// 4613732
	// 44
}

// gernerats a Fibonacci sequence til an uper value (max) ist reached
func Fibonacci(max int) []int {
	result := []int{1, 2}
	for result[len(result)-1] < max {
		result = append(result, result[len(result)-1]+result[len(result)-2])
	}
	return slices.Delete(result, len(result)-1, len(result))
}

func EvenSum(list []int) int {
	if len(list) == 0 {
		return 0
	}
	if list[0]%2 == 0 {
		return EvenSum(list[1:]) + list[0]
	}
	return EvenSum(list[1:])
}
