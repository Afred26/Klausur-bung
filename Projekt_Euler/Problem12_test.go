package Projekt_Euler

import (
	"fmt"
)

// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:
// 1: 1\
// 3: 1,3
// 6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over five hundred divisors?

func ExampleTriangleNum() {

	fmt.Println(CountDivicors(TriangleNum(7)))
	fmt.Println(FindTriangelNum(1000))

	// Output:
}

// Der Code müsste funktionieren, er läuft nur zu lange

func TriangleNum(n int) int {
	if n == 0 {
		return 0
	}
	return n + TriangleNum(n-1)
}

func CountDivicors(n int) int {
	counter := 0
	for i := 1; i <= n; i++ {
		if i%n == 0 {
			counter++
		}
	}
	return counter
}

func FindTriangelNum(n int) int {
	x := TriangleNum(n)
	if CountDivicors(x) >= 500 {
		return x
	}
	if n > 10000 { //Rechenzeit begrenzung
		return -1
	}
	return FindTriangelNum(n + 1)
}
